// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vdom.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vdom {

namespace {

const ::google::protobuf::Descriptor* Window_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Window_reflection_ = NULL;
const ::google::protobuf::Descriptor* Document_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Document_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Node_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Node_RenderType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_vdom_2eproto() {
  protobuf_AddDesc_vdom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vdom.proto");
  GOOGLE_CHECK(file != NULL);
  Window_descriptor_ = file->message_type(0);
  static const int Window_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Window, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Window, inner_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Window, inner_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Window, outer_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Window, outer_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Window, doc_),
  };
  Window_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Window_descriptor_,
      Window::default_instance_,
      Window_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Window, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Window, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Window));
  Document_descriptor_ = file->message_type(1);
  static const int Document_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, body_),
  };
  Document_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Document_descriptor_,
      Document::default_instance_,
      Document_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Document));
  Node_descriptor_ = file->message_type(2);
  static const int Node_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, tag_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, class_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, background_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, href_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, render_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, font_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, font_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, font_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, font_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, child_nodes_),
  };
  Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Node));
  Node_Type_descriptor_ = Node_descriptor_->enum_type(0);
  Node_RenderType_descriptor_ = Node_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vdom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Window_descriptor_, &Window::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Document_descriptor_, &Document::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Node_descriptor_, &Node::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vdom_2eproto() {
  delete Window::default_instance_;
  delete Window_reflection_;
  delete Document::default_instance_;
  delete Document_reflection_;
  delete Node::default_instance_;
  delete Node_reflection_;
}

void protobuf_AddDesc_vdom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nvdom.proto\022\004vdom\"\215\001\n\006Window\022\020\n\010locatio"
    "n\030\001 \002(\t\022\023\n\013inner_width\030\002 \001(\005\022\024\n\014inner_he"
    "ight\030\003 \001(\005\022\023\n\013outer_width\030\004 \001(\005\022\024\n\014outer"
    "_height\030\005 \001(\005\022\033\n\003doc\030\006 \001(\0132\016.vdom.Docume"
    "nt\"y\n\010Document\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030"
    "\002 \001(\005\022\r\n\005title\030\003 \001(\t\022\020\n\010keywords\030\004 \001(\t\022\023"
    "\n\013description\030\005 \001(\t\022\030\n\004body\030\n \001(\0132\n.vdom"
    ".Node\"\231\004\n\004Node\022\035\n\004type\030\001 \002(\0162\017.vdom.Node"
    ".Type\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\022\t\n\001w\030\004 \001(\r\022\t"
    "\n\001h\030\005 \001(\r\022\n\n\002id\030\007 \001(\t\022\020\n\010tag_name\030\006 \001(\t\022"
    "\014\n\004name\030\010 \001(\t\022\022\n\nclass_name\030\t \001(\t\022\r\n\005col"
    "or\030\n \001(\t\022\030\n\020background_color\030\013 \001(\t\022\016\n\006ta"
    "rget\030\014 \001(\t\022\013\n\003alt\030\r \001(\t\022\013\n\003src\030\016 \001(\t\022\014\n\004"
    "href\030\017 \001(\t\022\r\n\005value\030\020 \001(\t\022\014\n\004text\030\021 \001(\t\022"
    "1\n\013render_type\030\022 \001(\0162\025.vdom.Node.RenderT"
    "ype:\005OTHER\022\021\n\tfont_size\030\024 \001(\t\022\023\n\013font_fa"
    "mily\030\025 \001(\t\022\022\n\nfont_style\030\026 \001(\t\022\023\n\013font_w"
    "eight\030\027 \001(\t\022\037\n\013child_nodes\030\030 \003(\0132\n.vdom."
    "Node\"\035\n\004Type\022\010\n\004TEXT\020\000\022\013\n\007ELEMENT\020\001\"D\n\nR"
    "enderType\022\t\n\005BLOCK\020\000\022\n\n\006INLINE\020\001\022\t\n\005IMAG"
    "E\020\002\022\t\n\005VIDEO\020\003\022\t\n\005OTHER\020\n", 825);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vdom.proto", &protobuf_RegisterTypes);
  Window::default_instance_ = new Window();
  Document::default_instance_ = new Document();
  Node::default_instance_ = new Node();
  Window::default_instance_->InitAsDefaultInstance();
  Document::default_instance_->InitAsDefaultInstance();
  Node::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vdom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vdom_2eproto {
  StaticDescriptorInitializer_vdom_2eproto() {
    protobuf_AddDesc_vdom_2eproto();
  }
} static_descriptor_initializer_vdom_2eproto_;


// ===================================================================

const ::std::string Window::_default_location_;
#ifndef _MSC_VER
const int Window::kLocationFieldNumber;
const int Window::kInnerWidthFieldNumber;
const int Window::kInnerHeightFieldNumber;
const int Window::kOuterWidthFieldNumber;
const int Window::kOuterHeightFieldNumber;
const int Window::kDocFieldNumber;
#endif  // !_MSC_VER

Window::Window()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Window::InitAsDefaultInstance() {
  doc_ = const_cast< ::vdom::Document*>(&::vdom::Document::default_instance());
}

Window::Window(const Window& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Window::SharedCtor() {
  _cached_size_ = 0;
  location_ = const_cast< ::std::string*>(&_default_location_);
  inner_width_ = 0;
  inner_height_ = 0;
  outer_width_ = 0;
  outer_height_ = 0;
  doc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Window::~Window() {
  SharedDtor();
}

void Window::SharedDtor() {
  if (location_ != &_default_location_) {
    delete location_;
  }
  if (this != default_instance_) {
    delete doc_;
  }
}

void Window::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Window::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Window_descriptor_;
}

const Window& Window::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vdom_2eproto();  return *default_instance_;
}

Window* Window::default_instance_ = NULL;

Window* Window::New() const {
  return new Window;
}

void Window::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (location_ != &_default_location_) {
        location_->clear();
      }
    }
    inner_width_ = 0;
    inner_height_ = 0;
    outer_width_ = 0;
    outer_height_ = 0;
    if (_has_bit(5)) {
      if (doc_ != NULL) doc_->::vdom::Document::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Window::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string location = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inner_width;
        break;
      }
      
      // optional int32 inner_width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inner_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inner_width_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inner_height;
        break;
      }
      
      // optional int32 inner_height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inner_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inner_height_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outer_width;
        break;
      }
      
      // optional int32 outer_width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outer_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outer_width_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_outer_height;
        break;
      }
      
      // optional int32 outer_height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outer_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outer_height_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_doc;
        break;
      }
      
      // optional .vdom.Document doc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Window::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string location = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->location(), output);
  }
  
  // optional int32 inner_width = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inner_width(), output);
  }
  
  // optional int32 inner_height = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inner_height(), output);
  }
  
  // optional int32 outer_width = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outer_width(), output);
  }
  
  // optional int32 outer_height = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->outer_height(), output);
  }
  
  // optional .vdom.Document doc = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->doc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Window::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string location = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->location(), target);
  }
  
  // optional int32 inner_width = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inner_width(), target);
  }
  
  // optional int32 inner_height = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inner_height(), target);
  }
  
  // optional int32 outer_width = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outer_width(), target);
  }
  
  // optional int32 outer_height = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->outer_height(), target);
  }
  
  // optional .vdom.Document doc = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->doc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Window::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }
    
    // optional int32 inner_width = 2;
    if (has_inner_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inner_width());
    }
    
    // optional int32 inner_height = 3;
    if (has_inner_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inner_height());
    }
    
    // optional int32 outer_width = 4;
    if (has_outer_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outer_width());
    }
    
    // optional int32 outer_height = 5;
    if (has_outer_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outer_height());
    }
    
    // optional .vdom.Document doc = 6;
    if (has_doc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Window::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Window* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Window*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Window::MergeFrom(const Window& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_location(from.location());
    }
    if (from._has_bit(1)) {
      set_inner_width(from.inner_width());
    }
    if (from._has_bit(2)) {
      set_inner_height(from.inner_height());
    }
    if (from._has_bit(3)) {
      set_outer_width(from.outer_width());
    }
    if (from._has_bit(4)) {
      set_outer_height(from.outer_height());
    }
    if (from._has_bit(5)) {
      mutable_doc()->::vdom::Document::MergeFrom(from.doc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Window::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Window::CopyFrom(const Window& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Window::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_doc()) {
    if (!this->doc().IsInitialized()) return false;
  }
  return true;
}

void Window::Swap(Window* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(inner_width_, other->inner_width_);
    std::swap(inner_height_, other->inner_height_);
    std::swap(outer_width_, other->outer_width_);
    std::swap(outer_height_, other->outer_height_);
    std::swap(doc_, other->doc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Window::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Window_descriptor_;
  metadata.reflection = Window_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Document::_default_title_;
const ::std::string Document::_default_keywords_;
const ::std::string Document::_default_description_;
#ifndef _MSC_VER
const int Document::kWidthFieldNumber;
const int Document::kHeightFieldNumber;
const int Document::kTitleFieldNumber;
const int Document::kKeywordsFieldNumber;
const int Document::kDescriptionFieldNumber;
const int Document::kBodyFieldNumber;
#endif  // !_MSC_VER

Document::Document()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Document::InitAsDefaultInstance() {
  body_ = const_cast< ::vdom::Node*>(&::vdom::Node::default_instance());
}

Document::Document(const Document& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Document::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  title_ = const_cast< ::std::string*>(&_default_title_);
  keywords_ = const_cast< ::std::string*>(&_default_keywords_);
  description_ = const_cast< ::std::string*>(&_default_description_);
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Document::~Document() {
  SharedDtor();
}

void Document::SharedDtor() {
  if (title_ != &_default_title_) {
    delete title_;
  }
  if (keywords_ != &_default_keywords_) {
    delete keywords_;
  }
  if (description_ != &_default_description_) {
    delete description_;
  }
  if (this != default_instance_) {
    delete body_;
  }
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_descriptor_;
}

const Document& Document::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vdom_2eproto();  return *default_instance_;
}

Document* Document::default_instance_ = NULL;

Document* Document::New() const {
  return new Document;
}

void Document::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0;
    height_ = 0;
    if (_has_bit(2)) {
      if (title_ != &_default_title_) {
        title_->clear();
      }
    }
    if (_has_bit(3)) {
      if (keywords_ != &_default_keywords_) {
        keywords_->clear();
      }
    }
    if (_has_bit(4)) {
      if (description_ != &_default_description_) {
        description_->clear();
      }
    }
    if (_has_bit(5)) {
      if (body_ != NULL) body_->::vdom::Node::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }
      
      // optional int32 height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }
      
      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keywords;
        break;
      }
      
      // optional string keywords = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keywords().data(), this->keywords().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }
      
      // optional string description = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_body;
        break;
      }
      
      // optional .vdom.Node body = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 width = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }
  
  // optional int32 height = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }
  
  // optional string title = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }
  
  // optional string keywords = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->keywords(), output);
  }
  
  // optional string description = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->description(), output);
  }
  
  // optional .vdom.Node body = 10;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->body(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Document::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 width = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }
  
  // optional int32 height = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }
  
  // optional string title = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }
  
  // optional string keywords = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->keywords(), target);
  }
  
  // optional string description = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }
  
  // optional .vdom.Node body = 10;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->body(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Document::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string keywords = 4;
    if (has_keywords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keywords());
    }
    
    // optional string description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // optional .vdom.Node body = 10;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Document* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Document*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Document::MergeFrom(const Document& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_width(from.width());
    }
    if (from._has_bit(1)) {
      set_height(from.height());
    }
    if (from._has_bit(2)) {
      set_title(from.title());
    }
    if (from._has_bit(3)) {
      set_keywords(from.keywords());
    }
    if (from._has_bit(4)) {
      set_description(from.description());
    }
    if (from._has_bit(5)) {
      mutable_body()->::vdom::Node::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Document::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document::CopyFrom(const Document& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  
  if (has_body()) {
    if (!this->body().IsInitialized()) return false;
  }
  return true;
}

void Document::Swap(Document* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(title_, other->title_);
    std::swap(keywords_, other->keywords_);
    std::swap(description_, other->description_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Document::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Document_descriptor_;
  metadata.reflection = Document_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Node_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_Type_descriptor_;
}
bool Node_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Node_Type Node::TEXT;
const Node_Type Node::ELEMENT;
const Node_Type Node::Type_MIN;
const Node_Type Node::Type_MAX;
const int Node::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Node_RenderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_RenderType_descriptor_;
}
bool Node_RenderType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Node_RenderType Node::BLOCK;
const Node_RenderType Node::INLINE;
const Node_RenderType Node::IMAGE;
const Node_RenderType Node::VIDEO;
const Node_RenderType Node::OTHER;
const Node_RenderType Node::RenderType_MIN;
const Node_RenderType Node::RenderType_MAX;
const int Node::RenderType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string Node::_default_id_;
const ::std::string Node::_default_tag_name_;
const ::std::string Node::_default_name_;
const ::std::string Node::_default_class_name_;
const ::std::string Node::_default_color_;
const ::std::string Node::_default_background_color_;
const ::std::string Node::_default_target_;
const ::std::string Node::_default_alt_;
const ::std::string Node::_default_src_;
const ::std::string Node::_default_href_;
const ::std::string Node::_default_value_;
const ::std::string Node::_default_text_;
const ::std::string Node::_default_font_size_;
const ::std::string Node::_default_font_family_;
const ::std::string Node::_default_font_style_;
const ::std::string Node::_default_font_weight_;
#ifndef _MSC_VER
const int Node::kTypeFieldNumber;
const int Node::kXFieldNumber;
const int Node::kYFieldNumber;
const int Node::kWFieldNumber;
const int Node::kHFieldNumber;
const int Node::kIdFieldNumber;
const int Node::kTagNameFieldNumber;
const int Node::kNameFieldNumber;
const int Node::kClassNameFieldNumber;
const int Node::kColorFieldNumber;
const int Node::kBackgroundColorFieldNumber;
const int Node::kTargetFieldNumber;
const int Node::kAltFieldNumber;
const int Node::kSrcFieldNumber;
const int Node::kHrefFieldNumber;
const int Node::kValueFieldNumber;
const int Node::kTextFieldNumber;
const int Node::kRenderTypeFieldNumber;
const int Node::kFontSizeFieldNumber;
const int Node::kFontFamilyFieldNumber;
const int Node::kFontStyleFieldNumber;
const int Node::kFontWeightFieldNumber;
const int Node::kChildNodesFieldNumber;
#endif  // !_MSC_VER

Node::Node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Node::InitAsDefaultInstance() {
}

Node::Node(const Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Node::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  x_ = 0u;
  y_ = 0u;
  w_ = 0u;
  h_ = 0u;
  id_ = const_cast< ::std::string*>(&_default_id_);
  tag_name_ = const_cast< ::std::string*>(&_default_tag_name_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  class_name_ = const_cast< ::std::string*>(&_default_class_name_);
  color_ = const_cast< ::std::string*>(&_default_color_);
  background_color_ = const_cast< ::std::string*>(&_default_background_color_);
  target_ = const_cast< ::std::string*>(&_default_target_);
  alt_ = const_cast< ::std::string*>(&_default_alt_);
  src_ = const_cast< ::std::string*>(&_default_src_);
  href_ = const_cast< ::std::string*>(&_default_href_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  text_ = const_cast< ::std::string*>(&_default_text_);
  render_type_ = 10;
  font_size_ = const_cast< ::std::string*>(&_default_font_size_);
  font_family_ = const_cast< ::std::string*>(&_default_font_family_);
  font_style_ = const_cast< ::std::string*>(&_default_font_style_);
  font_weight_ = const_cast< ::std::string*>(&_default_font_weight_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Node::~Node() {
  SharedDtor();
}

void Node::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (tag_name_ != &_default_tag_name_) {
    delete tag_name_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (class_name_ != &_default_class_name_) {
    delete class_name_;
  }
  if (color_ != &_default_color_) {
    delete color_;
  }
  if (background_color_ != &_default_background_color_) {
    delete background_color_;
  }
  if (target_ != &_default_target_) {
    delete target_;
  }
  if (alt_ != &_default_alt_) {
    delete alt_;
  }
  if (src_ != &_default_src_) {
    delete src_;
  }
  if (href_ != &_default_href_) {
    delete href_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (text_ != &_default_text_) {
    delete text_;
  }
  if (font_size_ != &_default_font_size_) {
    delete font_size_;
  }
  if (font_family_ != &_default_font_family_) {
    delete font_family_;
  }
  if (font_style_ != &_default_font_style_) {
    delete font_style_;
  }
  if (font_weight_ != &_default_font_weight_) {
    delete font_weight_;
  }
  if (this != default_instance_) {
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vdom_2eproto();  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New() const {
  return new Node;
}

void Node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    x_ = 0u;
    y_ = 0u;
    w_ = 0u;
    h_ = 0u;
    if (_has_bit(5)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(6)) {
      if (tag_name_ != &_default_tag_name_) {
        tag_name_->clear();
      }
    }
    if (_has_bit(7)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (class_name_ != &_default_class_name_) {
        class_name_->clear();
      }
    }
    if (_has_bit(9)) {
      if (color_ != &_default_color_) {
        color_->clear();
      }
    }
    if (_has_bit(10)) {
      if (background_color_ != &_default_background_color_) {
        background_color_->clear();
      }
    }
    if (_has_bit(11)) {
      if (target_ != &_default_target_) {
        target_->clear();
      }
    }
    if (_has_bit(12)) {
      if (alt_ != &_default_alt_) {
        alt_->clear();
      }
    }
    if (_has_bit(13)) {
      if (src_ != &_default_src_) {
        src_->clear();
      }
    }
    if (_has_bit(14)) {
      if (href_ != &_default_href_) {
        href_->clear();
      }
    }
    if (_has_bit(15)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (text_ != &_default_text_) {
        text_->clear();
      }
    }
    render_type_ = 10;
    if (_has_bit(18)) {
      if (font_size_ != &_default_font_size_) {
        font_size_->clear();
      }
    }
    if (_has_bit(19)) {
      if (font_family_ != &_default_font_family_) {
        font_family_->clear();
      }
    }
    if (_has_bit(20)) {
      if (font_style_ != &_default_font_style_) {
        font_style_->clear();
      }
    }
    if (_has_bit(21)) {
      if (font_weight_ != &_default_font_weight_) {
        font_weight_->clear();
      }
    }
  }
  child_nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vdom.Node.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vdom::Node_Type_IsValid(value)) {
            set_type(static_cast< ::vdom::Node_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }
      
      // optional uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }
      
      // optional uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_w;
        break;
      }
      
      // optional uint32 w = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &w_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_h;
        break;
      }
      
      // optional uint32 h = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tag_name;
        break;
      }
      
      // optional string tag_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag_name().data(), this->tag_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_id;
        break;
      }
      
      // optional string id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_name;
        break;
      }
      
      // optional string name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_class_name;
        break;
      }
      
      // optional string class_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_name().data(), this->class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_color;
        break;
      }
      
      // optional string color = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_background_color;
        break;
      }
      
      // optional string background_color = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_background_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_background_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->background_color().data(), this->background_color().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_target;
        break;
      }
      
      // optional string target = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_alt;
        break;
      }
      
      // optional string alt = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alt().data(), this->alt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_src;
        break;
      }
      
      // optional string src = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_href;
        break;
      }
      
      // optional string href = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_href:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_href()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->href().data(), this->href().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_value;
        break;
      }
      
      // optional string value = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_text;
        break;
      }
      
      // optional string text = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_render_type;
        break;
      }
      
      // optional .vdom.Node.RenderType render_type = 18 [default = OTHER];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_render_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vdom::Node_RenderType_IsValid(value)) {
            set_render_type(static_cast< ::vdom::Node_RenderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_font_size;
        break;
      }
      
      // optional string font_size = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_font_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->font_size().data(), this->font_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_font_family;
        break;
      }
      
      // optional string font_family = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font_family:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_font_family()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->font_family().data(), this->font_family().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_font_style;
        break;
      }
      
      // optional string font_style = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_font_style()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->font_style().data(), this->font_style().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_font_weight;
        break;
      }
      
      // optional string font_weight = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font_weight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_font_weight()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->font_weight().data(), this->font_weight().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_child_nodes;
        break;
      }
      
      // repeated .vdom.Node child_nodes = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_child_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_child_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_child_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vdom.Node.Type type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional uint32 x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }
  
  // optional uint32 y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }
  
  // optional uint32 w = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->w(), output);
  }
  
  // optional uint32 h = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->h(), output);
  }
  
  // optional string tag_name = 6;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag_name().data(), this->tag_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->tag_name(), output);
  }
  
  // optional string id = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->id(), output);
  }
  
  // optional string name = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->name(), output);
  }
  
  // optional string class_name = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->class_name(), output);
  }
  
  // optional string color = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->color(), output);
  }
  
  // optional string background_color = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->background_color().data(), this->background_color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->background_color(), output);
  }
  
  // optional string target = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->target(), output);
  }
  
  // optional string alt = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alt().data(), this->alt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->alt(), output);
  }
  
  // optional string src = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->src(), output);
  }
  
  // optional string href = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->href().data(), this->href().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->href(), output);
  }
  
  // optional string value = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->value(), output);
  }
  
  // optional string text = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->text(), output);
  }
  
  // optional .vdom.Node.RenderType render_type = 18 [default = OTHER];
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->render_type(), output);
  }
  
  // optional string font_size = 20;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font_size().data(), this->font_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->font_size(), output);
  }
  
  // optional string font_family = 21;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font_family().data(), this->font_family().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->font_family(), output);
  }
  
  // optional string font_style = 22;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font_style().data(), this->font_style().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->font_style(), output);
  }
  
  // optional string font_weight = 23;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font_weight().data(), this->font_weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->font_weight(), output);
  }
  
  // repeated .vdom.Node child_nodes = 24;
  for (int i = 0; i < this->child_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->child_nodes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vdom.Node.Type type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional uint32 x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }
  
  // optional uint32 y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }
  
  // optional uint32 w = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->w(), target);
  }
  
  // optional uint32 h = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->h(), target);
  }
  
  // optional string tag_name = 6;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag_name().data(), this->tag_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->tag_name(), target);
  }
  
  // optional string id = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->id(), target);
  }
  
  // optional string name = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }
  
  // optional string class_name = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->class_name(), target);
  }
  
  // optional string color = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->color(), target);
  }
  
  // optional string background_color = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->background_color().data(), this->background_color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->background_color(), target);
  }
  
  // optional string target = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->target(), target);
  }
  
  // optional string alt = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alt().data(), this->alt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->alt(), target);
  }
  
  // optional string src = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->src(), target);
  }
  
  // optional string href = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->href().data(), this->href().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->href(), target);
  }
  
  // optional string value = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->value(), target);
  }
  
  // optional string text = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->text(), target);
  }
  
  // optional .vdom.Node.RenderType render_type = 18 [default = OTHER];
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->render_type(), target);
  }
  
  // optional string font_size = 20;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font_size().data(), this->font_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->font_size(), target);
  }
  
  // optional string font_family = 21;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font_family().data(), this->font_family().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->font_family(), target);
  }
  
  // optional string font_style = 22;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font_style().data(), this->font_style().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->font_style(), target);
  }
  
  // optional string font_weight = 23;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font_weight().data(), this->font_weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->font_weight(), target);
  }
  
  // repeated .vdom.Node child_nodes = 24;
  for (int i = 0; i < this->child_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->child_nodes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Node::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vdom.Node.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }
    
    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }
    
    // optional uint32 w = 4;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->w());
    }
    
    // optional uint32 h = 5;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->h());
    }
    
    // optional string id = 7;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // optional string tag_name = 6;
    if (has_tag_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag_name());
    }
    
    // optional string name = 8;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string class_name = 9;
    if (has_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_name());
    }
    
    // optional string color = 10;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }
    
    // optional string background_color = 11;
    if (has_background_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->background_color());
    }
    
    // optional string target = 12;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }
    
    // optional string alt = 13;
    if (has_alt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alt());
    }
    
    // optional string src = 14;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }
    
    // optional string href = 15;
    if (has_href()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->href());
    }
    
    // optional string value = 16;
    if (has_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string text = 17;
    if (has_text()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // optional .vdom.Node.RenderType render_type = 18 [default = OTHER];
    if (has_render_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->render_type());
    }
    
    // optional string font_size = 20;
    if (has_font_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->font_size());
    }
    
    // optional string font_family = 21;
    if (has_font_family()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->font_family());
    }
    
    // optional string font_style = 22;
    if (has_font_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->font_style());
    }
    
    // optional string font_weight = 23;
    if (has_font_weight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->font_weight());
    }
    
  }
  // repeated .vdom.Node child_nodes = 24;
  total_size += 2 * this->child_nodes_size();
  for (int i = 0; i < this->child_nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->child_nodes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  child_nodes_.MergeFrom(from.child_nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
    if (from._has_bit(3)) {
      set_w(from.w());
    }
    if (from._has_bit(4)) {
      set_h(from.h());
    }
    if (from._has_bit(5)) {
      set_id(from.id());
    }
    if (from._has_bit(6)) {
      set_tag_name(from.tag_name());
    }
    if (from._has_bit(7)) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_class_name(from.class_name());
    }
    if (from._has_bit(9)) {
      set_color(from.color());
    }
    if (from._has_bit(10)) {
      set_background_color(from.background_color());
    }
    if (from._has_bit(11)) {
      set_target(from.target());
    }
    if (from._has_bit(12)) {
      set_alt(from.alt());
    }
    if (from._has_bit(13)) {
      set_src(from.src());
    }
    if (from._has_bit(14)) {
      set_href(from.href());
    }
    if (from._has_bit(15)) {
      set_value(from.value());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_text(from.text());
    }
    if (from._has_bit(17)) {
      set_render_type(from.render_type());
    }
    if (from._has_bit(18)) {
      set_font_size(from.font_size());
    }
    if (from._has_bit(19)) {
      set_font_family(from.font_family());
    }
    if (from._has_bit(20)) {
      set_font_style(from.font_style());
    }
    if (from._has_bit(21)) {
      set_font_weight(from.font_weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < child_nodes_size(); i++) {
    if (!this->child_nodes(i).IsInitialized()) return false;
  }
  return true;
}

void Node::Swap(Node* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(id_, other->id_);
    std::swap(tag_name_, other->tag_name_);
    std::swap(name_, other->name_);
    std::swap(class_name_, other->class_name_);
    std::swap(color_, other->color_);
    std::swap(background_color_, other->background_color_);
    std::swap(target_, other->target_);
    std::swap(alt_, other->alt_);
    std::swap(src_, other->src_);
    std::swap(href_, other->href_);
    std::swap(value_, other->value_);
    std::swap(text_, other->text_);
    std::swap(render_type_, other->render_type_);
    std::swap(font_size_, other->font_size_);
    std::swap(font_family_, other->font_family_);
    std::swap(font_style_, other->font_style_);
    std::swap(font_weight_, other->font_weight_);
    child_nodes_.Swap(&other->child_nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vdom

// @@protoc_insertion_point(global_scope)
